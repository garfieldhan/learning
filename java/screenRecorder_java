import org.bytedeco.ffmpeg.global.avcodec;
import org.bytedeco.ffmpeg.global.avutil;
import org.bytedeco.javacv.FFmpegFrameRecorder;
import org.bytedeco.javacv.Frame;
import org.bytedeco.javacv.Java2DFrameConverter;
import org.bytedeco.javacv.OpenCVFrameGrabber;

import javax.sound.sampled.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.nio.ByteBuffer;

public class ScreenRecorder {

    private static final String OUTPUT_FILE = "output.mp4";
    private static final double FRAME_RATE = 30;
    private static final int AUDIO_SAMPLE_RATE = 44100;
    private static final int AUDIO_CHANNELS = 2;
    private static final int AUDIO_BUFFER_SIZE = 4096;

    private Rectangle screenBounds;
    private Robot robot;
    private FFmpegFrameRecorder recorder;
    private AudioFormat audioFormat;
    private TargetDataLine audioLine;

    public ScreenRecorder() throws AWTException {
        screenBounds = new Rectangle(Toolkit.getDefaultToolkit().getScreenSize());
        robot = new Robot();
        audioFormat = new AudioFormat(AUDIO_SAMPLE_RATE, 16, AUDIO_CHANNELS, true, false);
        audioLine = null;
    }

    public void startRecording() throws Exception {
        recorder = new FFmpegFrameRecorder(OUTPUT_FILE, (int) screenBounds.getWidth(), (int) screenBounds.getHeight(), AUDIO_CHANNELS);
        recorder.setVideoCodec(avcodec.AV_CODEC_ID_MPEG4);
        recorder.setFormat("mp4");
        recorder.setFrameRate(FRAME_RATE);
        recorder.setAudioCodec(avcodec.AV_CODEC_ID_AAC);
        recorder.setSampleRate(AUDIO_SAMPLE_RATE);
        recorder.setAudioChannels(AUDIO_CHANNELS);
        recorder.setAudioOption("crf", "0");
        recorder.start();

        AudioFormat audioFormat = new AudioFormat(AUDIO_SAMPLE_RATE, 16, AUDIO_CHANNELS, true, false);
        DataLine.Info info = new DataLine.Info(TargetDataLine.class, audioFormat);
        audioLine = (TargetDataLine) AudioSystem.getLine(info);
        audioLine.open(audioFormat, AUDIO_BUFFER_SIZE);
        audioLine.start();

        new Thread(() -> {
            byte[] audioBuffer = new byte[AUDIO_BUFFER_SIZE];
            while (true) {
                int bytesRead = audioLine.read(audioBuffer, 0, audioBuffer.length);
                if (bytesRead < 0) {
                    break;
                }
                recorder.recordSamples(ByteBuffer.wrap(audioBuffer, 0, bytesRead));
            }
        }).start();

        Java2DFrameConverter converter = new Java2DFrameConverter();
        while (true) {
            BufferedImage image = robot.createScreenCapture(screenBounds);
            Frame frame = converter.convert(image);
            recorder.record(frame);
        }
    }

    public void stopRecording() throws Exception {
        audioLine.stop();
        audioLine.close();
        recorder.stop();
        recorder.release();
    }
}
